# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Job(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, job_id: int=None, bssid: str=None, essid: str=None, channel: int=None, wave_lenght: str=None, group_id: int=None, status: str=None, created_at: datetime=None, is_active: bool=True, band: str=None, cswitch: int=None, security: str=None, wildcard: str=None, associated_clients: bool=False, channel_mode: str=None):  # noqa: E501
        """Job - a model defined in Swagger

        :param job_id: The job_id of this Job.  # noqa: E501
        :type job_id: int
        :param bssid: The bssid of this Job.  # noqa: E501
        :type bssid: str
        :param essid: The essid of this Job.  # noqa: E501
        :type essid: str
        :param channel: The channel of this Job.  # noqa: E501
        :type channel: int
        :param wave_lenght: The wave_lenght of this Job.  # noqa: E501
        :type wave_lenght: str
        :param group_id: The group_id of this Job.  # noqa: E501
        :type group_id: int
        :param status: The status of this Job.  # noqa: E501
        :type status: str
        :param created_at: The created_at of this Job.  # noqa: E501
        :type created_at: datetime
        :param is_active: The is_active of this Job.  # noqa: E501
        :type is_active: bool
        :param band: The band of this Job.  # noqa: E501
        :type band: str
        :param cswitch: The cswitch of this Job.  # noqa: E501
        :type cswitch: int
        :param security: The security of this Job.  # noqa: E501
        :type security: str
        :param wildcard: The wildcard of this Job.  # noqa: E501
        :type wildcard: str
        :param associated_clients: The associated_clients of this Job.  # noqa: E501
        :type associated_clients: bool
        :param channel_mode: The channel_mode of this Job.  # noqa: E501
        :type channel_mode: str
        """
        self.swagger_types = {
            'job_id': int,
            'bssid': str,
            'essid': str,
            'channel': int,
            'wave_lenght': str,
            'group_id': int,
            'status': str,
            'created_at': datetime,
            'is_active': bool,
            'band': str,
            'cswitch': int,
            'security': str,
            'wildcard': str,
            'associated_clients': bool,
            'channel_mode': str
        }

        self.attribute_map = {
            'job_id': 'JobID',
            'bssid': 'BSSID',
            'essid': 'ESSID',
            'channel': 'Channel',
            'wave_lenght': 'WaveLenght',
            'group_id': 'group_id',
            'status': 'Status',
            'created_at': 'created_at',
            'is_active': 'is_active',
            'band': 'band',
            'cswitch': 'cswitch',
            'security': 'security',
            'wildcard': 'wildcard',
            'associated_clients': 'associated_clients',
            'channel_mode': 'ChannelMode'
        }
        self._job_id = job_id
        self._bssid = bssid
        self._essid = essid
        self._channel = channel
        self._wave_lenght = wave_lenght
        self._group_id = group_id
        self._status = status
        self._created_at = created_at
        self._is_active = is_active
        self._band = band
        self._cswitch = cswitch
        self._security = security
        self._wildcard = wildcard
        self._associated_clients = associated_clients
        self._channel_mode = channel_mode

    @classmethod
    def from_db(cls, job_db):
        """
        Método para construir una instancia del Job desde la base de datos.
        
        :param job_db: Instancia de la base de datos del Job.
        :type job_db: <Database Model Instance>
        :return: Una instancia del modelo Job.
        :rtype: Job
        """
        return cls(
            job_id=job_db.JobID,
            bssid=job_db.BSSID,
            essid=job_db.ESSID,
            channel=job_db.Channel,
            wave_lenght=job_db.WaveLength,  # Corregido según la nueva definición de columna
            group_id=job_db.group_id,
            status=job_db.Status,
            created_at=job_db.created_at,
            is_active=job_db.is_active,
            band=job_db.band,  # Nuevos campos agregados aquí
            cswitch=job_db.cswitch,
            security=job_db.security,
            wildcard=job_db.wildcard,
            associated_clients=job_db.associated_clients,
            channel_mode=job_db.ChannelMode
        )
    @classmethod
    def from_dict(cls, dikt) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Job of this Job.  # noqa: E501
        :rtype: Job
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self) -> int:
        """Gets the job_id of this Job.


        :return: The job_id of this Job.
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id: int):
        """Sets the job_id of this Job.


        :param job_id: The job_id of this Job.
        :type job_id: int
        """

        self._job_id = job_id

    @property
    def bssid(self) -> str:
        """Gets the bssid of this Job.


        :return: The bssid of this Job.
        :rtype: str
        """
        return self._bssid

    @bssid.setter
    def bssid(self, bssid: str):
        """Sets the bssid of this Job.


        :param bssid: The bssid of this Job.
        :type bssid: str
        """

        self._bssid = bssid

    @property
    def essid(self) -> str:
        """Gets the essid of this Job.


        :return: The essid of this Job.
        :rtype: str
        """
        return self._essid

    @essid.setter
    def essid(self, essid: str):
        """Sets the essid of this Job.


        :param essid: The essid of this Job.
        :type essid: str
        """

        self._essid = essid

    @property
    def channel(self) -> int:
        """Gets the channel of this Job.


        :return: The channel of this Job.
        :rtype: int
        """
        return self._channel

    @channel.setter
    def channel(self, channel: int):
        """Sets the channel of this Job.


        :param channel: The channel of this Job.
        :type channel: int
        """

        self._channel = channel

    @property
    def wave_lenght(self) -> str:
        """Gets the wave_lenght of this Job.


        :return: The wave_lenght of this Job.
        :rtype: str
        """
        return self._wave_lenght

    @wave_lenght.setter
    def wave_lenght(self, wave_lenght: str):
        """Sets the wave_lenght of this Job.


        :param wave_lenght: The wave_lenght of this Job.
        :type wave_lenght: str
        """
        allowed_values = ["2.4 GHz", "5.0 GHz"]  # noqa: E501
        if wave_lenght not in allowed_values:
            raise ValueError(
                "Invalid value for `wave_lenght` ({0}), must be one of {1}"
                .format(wave_lenght, allowed_values)
            )

        self._wave_lenght = wave_lenght

    @property
    def group_id(self) -> int:
        """Gets the group_id of this Job.


        :return: The group_id of this Job.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id: int):
        """Sets the group_id of this Job.


        :param group_id: The group_id of this Job.
        :type group_id: int
        """

        self._group_id = group_id

    @property
    def status(self) -> str:
        """Gets the status of this Job.


        :return: The status of this Job.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Job.


        :param status: The status of this Job.
        :type status: str
        """
        allowed_values = ["stop", "monitorize", "scan"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this Job.


        :return: The created_at of this Job.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this Job.


        :param created_at: The created_at of this Job.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def is_active(self) -> bool:
        """Gets the is_active of this Job.


        :return: The is_active of this Job.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active: bool):
        """Sets the is_active of this Job.


        :param is_active: The is_active of this Job.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def band(self) -> str:
        """Gets the band of this Job.


        :return: The band of this Job.
        :rtype: str
        """
        return self._band

    @band.setter
    def band(self, band: str):
        """Sets the band of this Job.


        :param band: The band of this Job.
        :type band: str
        """

        self._band = band

    @property
    def cswitch(self) -> int:
        """Gets the cswitch of this Job.


        :return: The cswitch of this Job.
        :rtype: int
        """
        return self._cswitch

    @cswitch.setter
    def cswitch(self, cswitch: int):
        """Sets the cswitch of this Job.


        :param cswitch: The cswitch of this Job.
        :type cswitch: int
        """

        self._cswitch = cswitch

    @property
    def security(self) -> str:
        """Gets the security of this Job.


        :return: The security of this Job.
        :rtype: str
        """
        return self._security

    @security.setter
    def security(self, security: str):
        """Sets the security of this Job.


        :param security: The security of this Job.
        :type security: str
        """
        allowed_values = ["OPN", "WEP", "WPA", "WPA1", "WPA2", "WPA3", "OWE"]  # noqa: E501
        if security not in allowed_values:
            raise ValueError(
                "Invalid value for `security` ({0}), must be one of {1}"
                .format(security, allowed_values)
            )

        self._security = security

    @property
    def wildcard(self) -> str:
        """Gets the wildcard of this Job.


        :return: The wildcard of this Job.
        :rtype: str
        """
        return self._wildcard

    @wildcard.setter
    def wildcard(self, wildcard: str):
        """Sets the wildcard of this Job.


        :param wildcard: The wildcard of this Job.
        :type wildcard: str
        """

        self._wildcard = wildcard

    @property
    def associated_clients(self) -> bool:
        """Gets the associated_clients of this Job.


        :return: The associated_clients of this Job.
        :rtype: bool
        """
        return self._associated_clients

    @associated_clients.setter
    def associated_clients(self, associated_clients: bool):
        """Sets the associated_clients of this Job.


        :param associated_clients: The associated_clients of this Job.
        :type associated_clients: bool
        """

        self._associated_clients = associated_clients

    @property
    def channel_mode(self) -> str:
        """Gets the channel_mode of this Job.


        :return: The channel_mode of this Job.
        :rtype: str
        """
        return self._channel_mode

    @channel_mode.setter
    def channel_mode(self, channel_mode: str):
        """Sets the channel_mode of this Job.


        :param channel_mode: The channel_mode of this Job.
        :type channel_mode: str
        """
        allowed_values = ["ht20", "ht40-", "ht40+"]  # noqa: E501
        if channel_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `channel_mode` ({0}), must be one of {1}"
                .format(channel_mode, allowed_values)
            )

        self._channel_mode = channel_mode
