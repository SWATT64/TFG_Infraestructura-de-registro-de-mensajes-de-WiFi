# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util
from swagger_server.models.probe_database import ProbeDataBase


class Groups(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, probes_id: List[int]=None, is_active: bool=None):  # noqa: E501
        """Groups - a model defined in Swagger

        :param id: The id of this Groups.  # noqa: E501
        :type id: int
        :param name: The name of this Groups.  # noqa: E501
        :type name: str
        :param probes_id: The probes_id of this Groups.  # noqa: E501
        :type probes_id: List[int]
        :param is_active: The is_active of this Groups.  # noqa: E501
        :type is_active: bool
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'probes_id': List[int],
            'is_active': bool
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'Name',
            'probes_id': 'probes_id',
            'is_active': 'is_active'
        }
        self._id = id
        self._name = name
        self._probes_id = probes_id
        self._is_active = is_active

    @classmethod
    def from_db(cls, group_db):
        """
        MÃ©todo para construir una instancia del grupo desde la base de datos,
        permitiendo filtrar las sondas incluidas por su estado activo o inactivo.

        :param group_db: Instancia de la base de datos del grupo.
        :type group_db: <Database Model Instance>
        :param include_inactive_probes: Indica si se deben incluir sondas inactivas.
        :type include_inactive_probes: bool
        :return: Una instancia del modelo Groups.
        :rtype: Groups
        """
        probes_data_base = ProbeDataBase.query.filter_by(group_id=group_db.id).all()


        probes_list = [probe.id for probe in probes_data_base]
        return cls(
            id=group_db.id,
            name=group_db.name,
            probes_id=probes_list,
            is_active=group_db.is_active
        )

    @classmethod
    def from_dict(cls, dikt) -> 'Groups':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The groups of this Groups.  # noqa: E501
        :rtype: Groups
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Groups.


        :return: The id of this Groups.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Groups.


        :param id: The id of this Groups.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Groups.


        :return: The name of this Groups.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Groups.


        :param name: The name of this Groups.
        :type name: str
        """

        self._name = name

    @property
    def probes_id(self) -> List[int]:
        """Gets the probes_id of this Groups.


        :return: The probes_id of this Groups.
        :rtype: List[int]
        """
        return self._probes_id

    @probes_id.setter
    def probes_id(self, probes_id: List[int]):
        """Sets the probes_id of this Groups.


        :param probes_id: The probes_id of this Groups.
        :type probes_id: List[int]
        """

        self._probes_id = probes_id

    @property
    def is_active(self) -> bool:
        """Gets the is_active of this Groups.


        :return: The is_active of this Groups.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active: bool):
        """Sets the is_active of this Groups.


        :param is_active: The is_active of this Groups.
        :type is_active: bool
        """

        self._is_active = is_active
