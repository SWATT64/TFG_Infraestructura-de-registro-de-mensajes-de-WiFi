# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Probe(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, last_recorded_ip: str=None, in_use: bool=None, is_active: bool=None, group_id: int=None):  # noqa: E501
        """Probe - a model defined in Swagger

        :param id: The id of this Probe.  # noqa: E501
        :type id: int
        :param name: The name of this Probe.  # noqa: E501
        :type name: str
        :param last_recorded_ip: The last_recorded_ip of this Probe.  # noqa: E501
        :type last_recorded_ip: str
        :param in_use: The in_use of this Probe.  # noqa: E501
        :type in_use: bool
        :param is_active: The is_active of this Probe.  # noqa: E501
        :type is_active: bool
        :param group_id: The group_id of this Probe.  # noqa: E501
        :type group_id: int
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'last_recorded_ip': str,
            'in_use': bool,
            'is_active': bool,
            'group_id': int
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'Name',
            'last_recorded_ip': 'LastRecordedIP',
            'in_use': 'InUse',
            'is_active': 'is_active',
            'group_id': 'Group_id'
        }
        self._id = id
        self._name = name
        self._last_recorded_ip = last_recorded_ip
        self._in_use = in_use
        self._is_active = is_active
        self._group_id = group_id

    @classmethod
    def from_db(cls, probe_db):
        """
        Método para construir una instancia de sonda desde la base de datos,
        con opción para incluir sondas inactivas.

        :param probe_db: Instancia de la base de datos de la sonda.
        :type probe_db: <Database Model Instance>
        :param include_inactive: Si se incluyen sondas inactivas en la instancia creada.
        :type include_inactive: bool
        :return: Una instancia del modelo Probe.
        :rtype: Probe
        """

        return cls(
            id=probe_db.id,
            name=probe_db.name,
            last_recorded_ip=probe_db.last_recorded_ip,
            in_use=probe_db.in_use,
            is_active=probe_db.is_active,
            group_id=probe_db.group_id
        )
    @classmethod
    def from_dict(cls, dikt) -> 'Probe':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The probe of this Probe.  # noqa: E501
        :rtype: Probe
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Probe.


        :return: The id of this Probe.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Probe.


        :param id: The id of this Probe.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Probe.


        :return: The name of this Probe.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Probe.


        :param name: The name of this Probe.
        :type name: str
        """

        self._name = name

    @property
    def last_recorded_ip(self) -> str:
        """Gets the last_recorded_ip of this Probe.


        :return: The last_recorded_ip of this Probe.
        :rtype: str
        """
        return self._last_recorded_ip

    @last_recorded_ip.setter
    def last_recorded_ip(self, last_recorded_ip: str):
        """Sets the last_recorded_ip of this Probe.


        :param last_recorded_ip: The last_recorded_ip of this Probe.
        :type last_recorded_ip: str
        """

        self._last_recorded_ip = last_recorded_ip

    @property
    def in_use(self) -> bool:
        """Gets the in_use of this Probe.


        :return: The in_use of this Probe.
        :rtype: bool
        """
        return self._in_use

    @in_use.setter
    def in_use(self, in_use: bool):
        """Sets the in_use of this Probe.


        :param in_use: The in_use of this Probe.
        :type in_use: bool
        """

        self._in_use = in_use

    @property
    def is_active(self) -> bool:
        """Gets the is_active of this Probe.


        :return: The is_active of this Probe.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active: bool):
        """Sets the is_active of this Probe.


        :param is_active: The is_active of this Probe.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def group_id(self) -> int:
        """Gets the group_id of this Probe.


        :return: The group_id of this Probe.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id: int):
        """Sets the group_id of this Probe.


        :param group_id: The group_id of this Probe.
        :type group_id: int
        """

        self._group_id = group_id
